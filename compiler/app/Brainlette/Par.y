-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Brainlette.Par
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Brainlette.Abs
import Brainlette.Lex

}

%name pProg_internal Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  ')'       { PT _ (TS _ 6)  }
  '*'       { PT _ (TS _ 7)  }
  '+'       { PT _ (TS _ 8)  }
  '++'      { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '--'      { PT _ (TS _ 12) }
  '/'       { PT _ (TS _ 13) }
  ';'       { PT _ (TS _ 14) }
  '<'       { PT _ (TS _ 15) }
  '<='      { PT _ (TS _ 16) }
  '='       { PT _ (TS _ 17) }
  '=='      { PT _ (TS _ 18) }
  '>'       { PT _ (TS _ 19) }
  '>='      { PT _ (TS _ 20) }
  'boolean' { PT _ (TS _ 21) }
  'double'  { PT _ (TS _ 22) }
  'else'    { PT _ (TS _ 23) }
  'false'   { PT _ (TS _ 24) }
  'if'      { PT _ (TS _ 25) }
  'int'     { PT _ (TS _ 26) }
  'return'  { PT _ (TS _ 27) }
  'true'    { PT _ (TS _ 28) }
  'void'    { PT _ (TS _ 29) }
  'while'   { PT _ (TS _ 30) }
  '{'       { PT _ (TS _ 31) }
  '||'      { PT _ (TS _ 32) }
  '}'       { PT _ (TS _ 33) }
  L_Ident   { PT _ (TV _)    }
  L_doubl   { PT _ (TD _)    }
  L_integ   { PT _ (TI _)    }
  L_quoted  { PT _ (TL _)    }

%%

Ident :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Ident) }
Ident  : L_Ident { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Ident (tokenText $1)) }

Double  :: { (Brainlette.Abs.BNFC'Position, Double) }
Double   : L_doubl  { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Double) }

Integer :: { (Brainlette.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Brainlette.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Prog :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Prog) }
Prog
  : ListTopDef { (fst $1, Brainlette.Abs.Program (fst $1) (snd $1)) }

TopDef :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.TopDef) }
TopDef
  : Type Ident '(' ListArg ')' Blk { (fst $1, Brainlette.Abs.FnDef (fst $1) (snd $1) (snd $2) (snd $4) (snd $6)) }

Arg :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Arg) }
Arg
  : Type Ident { (fst $1, Brainlette.Abs.Argument (fst $1) (snd $1) (snd $2)) }

Blk :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Blk) }
Blk
  : '{' ListStmt '}' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Block (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Item :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Item) }
Item
  : Ident { (fst $1, Brainlette.Abs.NoInit (fst $1) (snd $1)) }
  | Ident '=' Expr { (fst $1, Brainlette.Abs.Init (fst $1) (snd $1) (snd $3)) }

Stmt :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Stmt) }
Stmt
  : ';' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Empty (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | Blk { (fst $1, Brainlette.Abs.BStmt (fst $1) (snd $1)) }
  | Type ListItem ';' { (fst $1, Brainlette.Abs.Decl (fst $1) (snd $1) (snd $2)) }
  | Ident '=' Expr ';' { (fst $1, Brainlette.Abs.Ass (fst $1) (snd $1) (snd $3)) }
  | Ident '++' ';' { (fst $1, Brainlette.Abs.Incr (fst $1) (snd $1)) }
  | Ident '--' ';' { (fst $1, Brainlette.Abs.Decr (fst $1) (snd $1)) }
  | 'return' Expr ';' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Ret (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' ';' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.VRet (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'if' '(' Expr ')' Stmt { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Cond (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Stmt 'else' Stmt { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.CondElse (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'while' '(' Expr ')' Stmt { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.While (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | Expr ';' { (fst $1, Brainlette.Abs.SExp (fst $1) (snd $1)) }

Type :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Type) }
Type
  : 'int' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Int (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'double' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Doub (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'boolean' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Bool (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Void (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }

Expr6 :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr6
  : Ident { (fst $1, Brainlette.Abs.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, Brainlette.Abs.ELitInt (fst $1) (snd $1)) }
  | Double { (fst $1, Brainlette.Abs.ELitDoub (fst $1) (snd $1)) }
  | 'true' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.ELitTrue (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.ELitFalse (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExpr ')' { (fst $1, Brainlette.Abs.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, Brainlette.Abs.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr5
  : '-' Expr6 { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Neg (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Not (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, Brainlette.Abs.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, Brainlette.Abs.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, Brainlette.Abs.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, Brainlette.Abs.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, Brainlette.Abs.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

AddOp :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.AddOp) }
AddOp
  : '+' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Plus (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Minus (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.MulOp) }
MulOp
  : '*' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Times (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Div (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.Mod (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (Brainlette.Abs.BNFC'Position, Brainlette.Abs.RelOp) }
RelOp
  : '<' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.LTH (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.LE (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.GTH (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.GE (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.EQU (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1), Brainlette.Abs.NE (uncurry Brainlette.Abs.BNFC'Position (tokenLineCol $1))) }

ListTopDef :: { (Brainlette.Abs.BNFC'Position, [Brainlette.Abs.TopDef]) }
ListTopDef
  : TopDef { (fst $1, (:[]) (snd $1)) }
  | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

ListArg :: { (Brainlette.Abs.BNFC'Position, [Brainlette.Abs.Arg]) }
ListArg
  : {- empty -} { (Brainlette.Abs.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

ListItem :: { (Brainlette.Abs.BNFC'Position, [Brainlette.Abs.Item]) }
ListItem
  : Item { (fst $1, (:[]) (snd $1)) }
  | Item ',' ListItem { (fst $1, (:) (snd $1) (snd $3)) }

ListExpr :: { (Brainlette.Abs.BNFC'Position, [Brainlette.Abs.Expr]) }
ListExpr
  : {- empty -} { (Brainlette.Abs.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

ListType :: { (Brainlette.Abs.BNFC'Position, [Brainlette.Abs.Type]) }
ListType
  : {- empty -} { (Brainlette.Abs.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

ListStmt :: { (Brainlette.Abs.BNFC'Position, [Brainlette.Abs.Stmt]) }
ListStmt
  : {- empty -} { (Brainlette.Abs.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProg :: [Token] -> Err Brainlette.Abs.Prog
pProg = fmap snd . pProg_internal
}

