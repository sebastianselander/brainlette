-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Brainlette.Par
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Brainlette.Abs
import Brainlette.Lex

}

%name pProg Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  ')'       { PT _ (TS _ 6)  }
  '*'       { PT _ (TS _ 7)  }
  '+'       { PT _ (TS _ 8)  }
  '++'      { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '--'      { PT _ (TS _ 12) }
  '/'       { PT _ (TS _ 13) }
  ';'       { PT _ (TS _ 14) }
  '<'       { PT _ (TS _ 15) }
  '<='      { PT _ (TS _ 16) }
  '='       { PT _ (TS _ 17) }
  '=='      { PT _ (TS _ 18) }
  '>'       { PT _ (TS _ 19) }
  '>='      { PT _ (TS _ 20) }
  'boolean' { PT _ (TS _ 21) }
  'double'  { PT _ (TS _ 22) }
  'else'    { PT _ (TS _ 23) }
  'false'   { PT _ (TS _ 24) }
  'if'      { PT _ (TS _ 25) }
  'int'     { PT _ (TS _ 26) }
  'return'  { PT _ (TS _ 27) }
  'true'    { PT _ (TS _ 28) }
  'void'    { PT _ (TS _ 29) }
  'while'   { PT _ (TS _ 30) }
  '{'       { PT _ (TS _ 31) }
  '||'      { PT _ (TS _ 32) }
  '}'       { PT _ (TS _ 33) }
  L_Ident   { PT _ (TV $$)   }
  L_doubl   { PT _ (TD $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }

%%

Ident :: { Brainlette.Abs.Ident }
Ident  : L_Ident { Brainlette.Abs.Ident $1 }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Prog :: { Brainlette.Abs.Prog }
Prog : ListTopDef { Brainlette.Abs.Program $1 }

TopDef :: { Brainlette.Abs.TopDef }
TopDef
  : Type Ident '(' ListArg ')' Blk { Brainlette.Abs.FnDef $1 $2 $4 $6 }

ListTopDef :: { [Brainlette.Abs.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Arg :: { Brainlette.Abs.Arg }
Arg : Type Ident { Brainlette.Abs.Argument $1 $2 }

ListArg :: { [Brainlette.Abs.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Blk :: { Brainlette.Abs.Blk }
Blk : '{' ListStmt '}' { Brainlette.Abs.Block $2 }

ListStmt :: { [Brainlette.Abs.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { Brainlette.Abs.Stmt }
Stmt
  : ';' { Brainlette.Abs.Empty }
  | Blk { Brainlette.Abs.BStmt $1 }
  | Type ListItem ';' { Brainlette.Abs.Decl $1 $2 }
  | Ident '=' Expr ';' { Brainlette.Abs.Ass $1 $3 }
  | Ident '++' ';' { Brainlette.Abs.Incr $1 }
  | Ident '--' ';' { Brainlette.Abs.Decr $1 }
  | 'return' Expr ';' { Brainlette.Abs.Ret $2 }
  | 'return' ';' { Brainlette.Abs.VRet }
  | 'if' '(' Expr ')' Stmt { Brainlette.Abs.Cond $3 $5 }
  | 'if' '(' Expr ')' Stmt 'else' Stmt { Brainlette.Abs.CondElse $3 $5 $7 }
  | 'while' '(' Expr ')' Stmt { Brainlette.Abs.While $3 $5 }
  | Expr ';' { Brainlette.Abs.SExp $1 }

Item :: { Brainlette.Abs.Item }
Item
  : Ident { Brainlette.Abs.NoInit $1 }
  | Ident '=' Expr { Brainlette.Abs.Init $1 $3 }

ListItem :: { [Brainlette.Abs.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

Type :: { Brainlette.Abs.Type }
Type
  : 'int' { Brainlette.Abs.Int }
  | 'double' { Brainlette.Abs.Doub }
  | 'boolean' { Brainlette.Abs.Bool }
  | 'void' { Brainlette.Abs.Void }

ListType :: { [Brainlette.Abs.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

Expr6 :: { Brainlette.Abs.Expr }
Expr6
  : Ident { Brainlette.Abs.EVar $1 }
  | Integer { Brainlette.Abs.ELitInt $1 }
  | Double { Brainlette.Abs.ELitDoub $1 }
  | 'true' { Brainlette.Abs.ELitTrue }
  | 'false' { Brainlette.Abs.ELitFalse }
  | Ident '(' ListExpr ')' { Brainlette.Abs.EApp $1 $3 }
  | String { Brainlette.Abs.EString $1 }
  | '(' Expr ')' { $2 }

Expr5 :: { Brainlette.Abs.Expr }
Expr5
  : '-' Expr6 { Brainlette.Abs.Neg $2 }
  | '!' Expr6 { Brainlette.Abs.Not $2 }
  | Expr6 { $1 }

Expr4 :: { Brainlette.Abs.Expr }
Expr4
  : Expr4 MulOp Expr5 { Brainlette.Abs.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { Brainlette.Abs.Expr }
Expr3
  : Expr3 AddOp Expr4 { Brainlette.Abs.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { Brainlette.Abs.Expr }
Expr2
  : Expr2 RelOp Expr3 { Brainlette.Abs.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { Brainlette.Abs.Expr }
Expr1
  : Expr2 '&&' Expr1 { Brainlette.Abs.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { Brainlette.Abs.Expr }
Expr : Expr1 '||' Expr { Brainlette.Abs.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [Brainlette.Abs.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { Brainlette.Abs.AddOp }
AddOp : '+' { Brainlette.Abs.Plus } | '-' { Brainlette.Abs.Minus }

MulOp :: { Brainlette.Abs.MulOp }
MulOp
  : '*' { Brainlette.Abs.Times }
  | '/' { Brainlette.Abs.Div }
  | '%' { Brainlette.Abs.Mod }

RelOp :: { Brainlette.Abs.RelOp }
RelOp
  : '<' { Brainlette.Abs.LTH }
  | '<=' { Brainlette.Abs.LE }
  | '>' { Brainlette.Abs.GTH }
  | '>=' { Brainlette.Abs.GE }
  | '==' { Brainlette.Abs.EQU }
  | '!=' { Brainlette.Abs.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

