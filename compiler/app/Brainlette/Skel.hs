-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Brainlette.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Brainlette.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Brainlette.Abs.Ident -> Result
transIdent x = case x of
  Brainlette.Abs.Ident string -> failure x

transProg :: Brainlette.Abs.Prog -> Result
transProg x = case x of
  Brainlette.Abs.Program topdefs -> failure x

transTopDef :: Brainlette.Abs.TopDef -> Result
transTopDef x = case x of
  Brainlette.Abs.FnDef type_ ident args blk -> failure x

transArg :: Brainlette.Abs.Arg -> Result
transArg x = case x of
  Brainlette.Abs.Argument type_ ident -> failure x

transBlk :: Brainlette.Abs.Blk -> Result
transBlk x = case x of
  Brainlette.Abs.Block stmts -> failure x

transStmt :: Brainlette.Abs.Stmt -> Result
transStmt x = case x of
  Brainlette.Abs.Empty -> failure x
  Brainlette.Abs.BStmt blk -> failure x
  Brainlette.Abs.Decl type_ items -> failure x
  Brainlette.Abs.Ass ident expr -> failure x
  Brainlette.Abs.Incr ident -> failure x
  Brainlette.Abs.Decr ident -> failure x
  Brainlette.Abs.Ret expr -> failure x
  Brainlette.Abs.VRet -> failure x
  Brainlette.Abs.Cond expr stmt -> failure x
  Brainlette.Abs.CondElse expr stmt1 stmt2 -> failure x
  Brainlette.Abs.While expr stmt -> failure x
  Brainlette.Abs.SExp expr -> failure x

transItem :: Brainlette.Abs.Item -> Result
transItem x = case x of
  Brainlette.Abs.NoInit ident -> failure x
  Brainlette.Abs.Init ident expr -> failure x

transType :: Brainlette.Abs.Type -> Result
transType x = case x of
  Brainlette.Abs.Int -> failure x
  Brainlette.Abs.Doub -> failure x
  Brainlette.Abs.Bool -> failure x
  Brainlette.Abs.Void -> failure x
  Brainlette.Abs.Fun type_ types -> failure x

transExpr :: Brainlette.Abs.Expr -> Result
transExpr x = case x of
  Brainlette.Abs.EVar ident -> failure x
  Brainlette.Abs.ELitInt integer -> failure x
  Brainlette.Abs.ELitDoub double -> failure x
  Brainlette.Abs.ELitTrue -> failure x
  Brainlette.Abs.ELitFalse -> failure x
  Brainlette.Abs.EApp ident exprs -> failure x
  Brainlette.Abs.EString string -> failure x
  Brainlette.Abs.Neg expr -> failure x
  Brainlette.Abs.Not expr -> failure x
  Brainlette.Abs.EMul expr1 mulop expr2 -> failure x
  Brainlette.Abs.EAdd expr1 addop expr2 -> failure x
  Brainlette.Abs.ERel expr1 relop expr2 -> failure x
  Brainlette.Abs.EAnd expr1 expr2 -> failure x
  Brainlette.Abs.EOr expr1 expr2 -> failure x

transAddOp :: Brainlette.Abs.AddOp -> Result
transAddOp x = case x of
  Brainlette.Abs.Plus -> failure x
  Brainlette.Abs.Minus -> failure x

transMulOp :: Brainlette.Abs.MulOp -> Result
transMulOp x = case x of
  Brainlette.Abs.Times -> failure x
  Brainlette.Abs.Div -> failure x
  Brainlette.Abs.Mod -> failure x

transRelOp :: Brainlette.Abs.RelOp -> Result
transRelOp x = case x of
  Brainlette.Abs.LTH -> failure x
  Brainlette.Abs.LE -> failure x
  Brainlette.Abs.GTH -> failure x
  Brainlette.Abs.GE -> failure x
  Brainlette.Abs.EQU -> failure x
  Brainlette.Abs.NE -> failure x
